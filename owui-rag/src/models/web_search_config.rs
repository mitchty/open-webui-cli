/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebSearchConfig {
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "engine", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub engine: Option<Option<String>>,
    #[serde(rename = "searxng_query_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub searxng_query_url: Option<Option<String>>,
    #[serde(rename = "google_pse_api_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub google_pse_api_key: Option<Option<String>>,
    #[serde(rename = "google_pse_engine_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub google_pse_engine_id: Option<Option<String>>,
    #[serde(rename = "brave_search_api_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub brave_search_api_key: Option<Option<String>>,
    #[serde(rename = "serpstack_api_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub serpstack_api_key: Option<Option<String>>,
    #[serde(rename = "serpstack_https", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub serpstack_https: Option<Option<bool>>,
    #[serde(rename = "serper_api_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub serper_api_key: Option<Option<String>>,
    #[serde(rename = "serply_api_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub serply_api_key: Option<Option<String>>,
    #[serde(rename = "tavily_api_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tavily_api_key: Option<Option<String>>,
    #[serde(rename = "searchapi_api_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub searchapi_api_key: Option<Option<String>>,
    #[serde(rename = "searchapi_engine", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub searchapi_engine: Option<Option<String>>,
    #[serde(rename = "result_count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub result_count: Option<Option<i32>>,
    #[serde(rename = "concurrent_requests", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub concurrent_requests: Option<Option<i32>>,
}

impl WebSearchConfig {
    pub fn new(enabled: bool) -> WebSearchConfig {
        WebSearchConfig {
            enabled,
            engine: None,
            searxng_query_url: None,
            google_pse_api_key: None,
            google_pse_engine_id: None,
            brave_search_api_key: None,
            serpstack_api_key: None,
            serpstack_https: None,
            serper_api_key: None,
            serply_api_key: None,
            tavily_api_key: None,
            searchapi_api_key: None,
            searchapi_engine: None,
            result_count: None,
            concurrent_requests: None,
        }
    }
}

