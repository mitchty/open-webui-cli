diff --git a/api/webui/src/apis/files_api.rs b/api/webui/src/apis/files_api.rs
index 6c609f9..9dcb41b 100644
--- a/api/webui/src/apis/files_api.rs
+++ b/api/webui/src/apis/files_api.rs
@@ -221,6 +221,7 @@ pub async fn get_file_by_id_files_id_get(
 pub async fn get_file_content_by_id_files_id_content_file_name_get(
     configuration: &configuration::Configuration,
     id: &str,
+    file_name: &str, // This isn't used internally but openapi considers it a spec violation not to use a path component
 ) -> Result<serde_json::Value, Error<GetFileContentByIdFilesIdContentFileNameGetError>> {
     let local_var_configuration = configuration;
 
@@ -498,8 +499,8 @@ pub async fn upload_file_files_post(
     if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
     };
-    let mut local_var_form = reqwest::multipart::Form::new();
-    // TODO: support file upload for 'file' parameter
+    let local_var_form = reqwest::multipart::Form::new().file("file", file).await?;
+
     local_var_req_builder = local_var_req_builder.multipart(local_var_form);
 
     let local_var_req = local_var_req_builder.build()?;
diff --git b/api/webui/src/models/data.rs a/api/webui/src/models/data.rs
index e627a12..9b82733 100644
--- b/api/webui/src/models/data.rs
+++ a/api/webui/src/models/data.rs
@@ -12,10 +12,13 @@ use crate::models;
 use serde::{Deserialize, Serialize};
 
 #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
-pub struct Data {}
+pub struct Data {
+    #[serde(rename = "content")]
+    pub content: Option<String>,
+}
 
 impl Data {
     pub fn new() -> Data {
-        Data {}
+        Data { content: None }
     }
 }
diff --git b/api/webui/src/models/file_meta.rs a/api/webui/src/models/file_meta.rs
index 77b6375..72d5105 100644
--- b/api/webui/src/models/file_meta.rs
+++ a/api/webui/src/models/file_meta.rs
@@ -14,11 +14,11 @@ use serde::{Deserialize, Serialize};
 #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
 pub struct FileMeta {
     #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
-    pub name: Option<Box<models::Name>>,
+    pub name: Option<String>,
     #[serde(rename = "content_type", skip_serializing_if = "Option::is_none")]
-    pub content_type: Option<Box<models::ContentType>>,
+    pub content_type: Option<String>,
     #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
-    pub size: Option<Box<models::Size>>,
+    pub size: Option<u32>,
 }
 
 impl FileMeta {
diff --git b/api/webui/src/models/file_model_response.rs a/api/webui/src/models/file_model_response.rs
index d034c2c..b4deecd 100644
--- b/api/webui/src/models/file_model_response.rs
+++ a/api/webui/src/models/file_model_response.rs
@@ -18,11 +18,9 @@ pub struct FileModelResponse {
     #[serde(rename = "user_id")]
     pub user_id: String,
     #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
-    pub hash: Option<Box<models::Hash>>,
+    pub hash: Option<String>,
     #[serde(rename = "filename")]
     pub filename: String,
-    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
-    pub data: Option<Box<models::Data>>,
     #[serde(rename = "meta")]
     pub meta: models::FileMeta,
     #[serde(rename = "created_at")]
@@ -45,7 +43,6 @@ impl FileModelResponse {
             user_id,
             hash: None,
             filename,
-            data: None,
             meta,
             created_at,
             updated_at,
diff --git a/api/webui/src/apis/knowledge_api.rs b/api/webui/src/apis/knowledge_api.rs
index 9969f98..56ddeb0 100644
--- a/api/webui/src/apis/knowledge_api.rs
+++ b/api/webui/src/apis/knowledge_api.rs
@@ -9,7 +9,7 @@
  */
 
 use super::{configuration, Error};
-use crate::{apis::ResponseContent, models};
+use crate::{apis::ResponseContent, models::{self, ResponseGetKnowledgeItemsKnowledgeGet}};
 use reqwest;
 use serde::{Deserialize, Serialize};
 
@@ -264,7 +264,7 @@ pub async fn get_knowledge_by_id_knowledge_id_get(
 pub async fn get_knowledge_items_knowledge_get(
     configuration: &configuration::Configuration,
     id: Option<&str>,
-) -> Result<models::ResponseGetKnowledgeItemsKnowledgeGet, Error<GetKnowledgeItemsKnowledgeGetError>>
+) -> Result<Option<Vec<models::ResponseGetKnowledgeItemsKnowledgeGet>>, Error<GetKnowledgeItemsKnowledgeGetError>>
 {
     let local_var_configuration = configuration;
 
@@ -292,7 +292,11 @@ pub async fn get_knowledge_items_knowledge_get(
     let local_var_content = local_var_resp.text().await?;
 
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
-        serde_json::from_str(&local_var_content).map_err(Error::from)
+        if local_var_content == "[]" {
+            Ok(None)
+        }else {
+            serde_json::from_str(&local_var_content).map_err(Error::from)
+        }
     } else {
         let local_var_entity: Option<GetKnowledgeItemsKnowledgeGetError> =
             serde_json::from_str(&local_var_content).ok();
diff --git a/api/webui/src/models/response_get_knowledge_items_knowledge__get.rs b/api/webui/src/models/response_get_knowledge_items_knowledge__get.rs
index 71e5978..5b23cc9 100644
--- a/api/webui/src/models/response_get_knowledge_items_knowledge__get.rs
+++ b/api/webui/src/models/response_get_knowledge_items_knowledge__get.rs
@@ -27,7 +27,7 @@ pub struct ResponseGetKnowledgeItemsKnowledgeGet {
     pub created_at: i32,
     #[serde(rename = "updated_at")]
     pub updated_at: i32,
-    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
+    #[serde(rename = "files", skip_serializing_if = "Option::is_none", default)]
     pub files: Option<Vec<models::KnowledgeResponseFilesInner>>,
 }
 
