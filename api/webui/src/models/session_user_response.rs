/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionUserResponse {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "role")]
    pub role: String,
    #[serde(rename = "profile_image_url")]
    pub profile_image_url: String,
    #[serde(rename = "token")]
    pub token: String,
    #[serde(rename = "token_type")]
    pub token_type: String,
    #[serde(
        rename = "expires_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub expires_at: Option<Option<i32>>,
}

impl SessionUserResponse {
    pub fn new(
        id: String,
        email: String,
        name: String,
        role: String,
        profile_image_url: String,
        token: String,
        token_type: String,
    ) -> SessionUserResponse {
        SessionUserResponse {
            id,
            email,
            name,
            role,
            profile_image_url,
            token,
            token_type,
            expires_at: None,
        }
    }
}
